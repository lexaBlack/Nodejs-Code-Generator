#!/bin/bash

read -p "? Project Name: " DIRNAME
mkdir $DIRNAME
cd $DIRNAME
mkdir {controllers,views,public,files,models,middlewares,utils,routes}
touch .gitignore
cat > .gitignore <<EOF
.DS_Store
node_modules
#dist
# local env files
.env.local
.env.*.local


# Log files
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
EOF

cd controllers && touch initialController.js
cat >initialController.js <<EOF
//Codes are generated by the terminal you can edit it later
//The app is developed and maintained by axelkay @lexaBlack on github

const InitiateModel = require('../models/initialModel');
const Sequelize = require('sequelize');
const request = require('request')
const Op = Sequelize.Op


exports.initialController = (req,res,next) =>{

    InitialModel.findAll().then(result =>{

        res.render('view',{infoVariable:result})
    }).catch(err =>{
        console.log(err)
    })
};

EOF

cd ..

cd models && touch initialModel.js
cat >initialModel.js <<EOF
//Codes are generated by the terminal you can edit it later
//The app is developed and maintained by axelkay @lexaBlack on github

const Sequelize = require('sequelize');
const sequelize = require('../utils/database');
const ModelName = sequelize.define('modelname',{

    TableId:{
        type: Sequelize.UUID,
        defaultValue: Sequelize.UUIDV1,
        primaryKey: true
        
       
    },
    fieldOne:{
        type:Sequelize.STRING,
        allowNull:true

    },
    fieldTwo:{
        type:Sequelize.STRING,
        allowNull:true

    }
});

module.exports = ModelName;


EOF

cd ..

cd utils && touch database.js
cat >database.js <<EOF
//Codes are generated by the terminal you can edit it later
//The app is developed and maintained by axelkay @lexaBlack on github

const Sequelize = require('sequelize');

const sequelize = new Sequelize('postgres-db-link', {
    dialectOptions: {
        ssl: true
    }
});
//add your postgres db link
//below code can  be used to connect to a remote db server if you have one
/*
const sequelize = new Sequelize('db-name','username','password',{ 
    dialect:'mysql',
    host:'server-ip-address',
    pool: {
        max: 500,
        min: 0,
        idle: 1000
      }});
   */
module.exports = sequelize;


EOF

cd ..

cd routes && touch initialRoute.js
cat >initialRoute.js <<EOF
//Codes are generated by the terminal you can edit it later
//The app is developed and maintained by axelkay @lexaBlack on github

const express = require('express');
const initialController = require('../controllers/initialController');
const initialMiddleware = require('../middlewares/initialMiddleware');
const router =express.Router();

//we assume that you understand the use of middlewares :-)

router.get('/',initialController.GetController);
router.post('/action-to-perfom',initialController.PostController);
router.get('/get-with-Id/:id',initialController.GetController);


module.exports=router;


EOF

cd ..
cd middlewares && touch initialMiddleware.js
cat >initialMiddleware.js <<EOF
//Codes are generated by the terminal you can edit it later
//The app is developed and maintained by axelkay @lexaBlack on github

module.exports = (req,res,next) =>{
   
   //this middleware do less its only checking the session data and takes action

    if(!req.session.isLoggedIn){
        return res.redirect('/route-name
    }
    next(); //else it goes to the main controller
}

EOF

cd ..
touch app.js
cat >app.js <<EOF
//Codes are generated by the terminal you can edit it later
//The app is developed and maintained by axelkay @lexaBlack on github

var express =require('express');
var bodyParser = require('body-parser');
const Sequelize = require('sequelize');
const path = require('path');

//other routes can be added later

const initialRoute = require('./routes/initialRoute');
const multer =require('multer');
const sequelize = require('./utils/database');
const session = require('express-session');


const fileStorage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'files');
  },
  filename: (req, file, cb) => {
    cb(null, new Date().toISOString() + '-' + file.originalname);
  }
});
const fileFilter = (req, file, cb) => {
  // if (file.mimetype === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
     cb(null, true);
   //} else {
    // cb(null, false);
   //}
 };
var upload = multer({ storage: fileStorage, fileFilter: fileFilter });
var app = express();
var SequelizeStore = require("connect-session-sequelize")(session.Store);
app.use(
  session({
    secret: "Xz;bvg56*%$;(k^ZTf2Th8$r(92GAb\$PGQ",
    store: new SequelizeStore({
      db: sequelize,
    }),
    resave: false, // we support the touch method so per the express-session docs this should be set to false
    saveUninitialized:false
  })
);
app.use('/files', express.static(path.join(__dirname, 'files')));
app.set('view engine','ejs');
app.set('views','views');
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.static(path.join(__dirname,'public')));
var portnumber = process.env.PORT || 8083;


app.use((error,req,res,next)=>{
    const status = error.statusCode || 500;
    const message = error.message;
    const data = error.data;
    console.log(data)
});


app.use((error,req,res,next)=>{
  const status = error.statusCode || 500;
  const message = error.message;
  const data = error.data;
  console.log("err",message,"Errors",status);
});

app.use(initialRoute);


app.use((req,res,next)=>{
  res.status(404).send("<h1>Page Not Found :-)</h1>");
});



sequelize.sync({force:false}).then(result => {
//that false if it is turned to true it will wipe all your data in db
 
app.listen(process.env.PORT || portnumber, function() {

});
})

EOF

cat >Procfile <<EOF
web: node app.js
EOF